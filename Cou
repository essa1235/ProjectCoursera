#!/usr/bin/env python
# coding: utf-8

# In[2]:


try:
    import yfinance as yf
except ModuleNotFoundError:
    print("The 'yfinance' module is not installed. Installing now...")
    import subprocess
    subprocess.check_call(["pip", "install", "yfinance"])
    import yfinance as yf

# Define the stock symbol and the date range
stock_symbol = "TSLA"
start_date = "2022-01-01"
end_date = "2022-12-31"

# Fetch the stock data using yfinance
tesla_stock_data = yf.download(stock_symbol, start=start_date, end=end_date)

# Print the stock data
print(tesla_stock_data)


# In[4]:


import requests
from bs4 import BeautifulSoup

# Define the URL of the webpage containing Tesla revenue data
url = "https://example.com/tesla-revenue"

# Send a GET request to the webpage
response = requests.get(url)

# Parse the HTML content of the webpage
soup = BeautifulSoup(response.content, "html.parser")

# Find the revenue data on the webpage using appropriate HTML tags and attributes
revenue_element = soup.find("span", class_="revenue-data")

# Extract the revenue value if the element is found
if revenue_element is not None:
    tesla_revenue = revenue_element.text.strip()
    print("Tesla Revenue:", tesla_revenue)
else:
    print("Unable to find Tesla revenue data on the webpage.")


# In[1]:


import yfinance as yf

# Define the stock symbol and the date range
stock_symbol = "GME"
start_date = "2022-01-01"
end_date = "2022-12-31"

# Fetch the stock data using yfinance
gamestop_stock_data = yf.download(stock_symbol, start=start_date, end=end_date)

# Print the stock data
print(gamestop_stock_data)


# In[3]:


import requests
from bs4 import BeautifulSoup

# Define the URL of the webpage containing GameStop revenue data
url = "https://example.com/gamestop-revenue"

# Send a GET request to the webpage
response = requests.get(url)

# Parse the HTML content of the webpage
soup = BeautifulSoup(response.content, "html.parser")

# Find the revenue data on the webpage using appropriate HTML tags and attributes
revenue_element = soup.find("span", class_="revenue-data")

# Extract the revenue value if the element is found
if revenue_element is not None:
    gamestop_revenue = revenue_element.text.strip()
    print("GameStop Revenue:", gamestop_revenue)
else:
    print("Unable to find GameStop revenue data on the webpage.")


# In[4]:


import yfinance as yf
import matplotlib.pyplot as plt

def make_graph(data, title):
    plt.figure(figsize=(10, 6))
    plt.plot(data.index, data['Close'])
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(title)
    plt.grid(True)
    plt.show()

# Define the stock symbol and the date range
stock_symbol = "TSLA"
start_date = "2022-01-01"
end_date = "2022-12-31"

# Fetch the stock data using yfinance
tesla_stock_data = yf.download(stock_symbol, start=start_date, end=end_date)

# Plot the Tesla stock data
make_graph(tesla_stock_data, "Tesla Stock Data")

# Save the plot as an image (optional)
plt.savefig('tesla_stock_graph.png')


# In[5]:


import yfinance as yf
import matplotlib.pyplot as plt

def make_graph(data, title):
    plt.figure(figsize=(10, 6))
    plt.plot(data.index, data['Close'])
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(title)
    plt.grid(True)
    plt.show()

# Define the stock symbol and the date range
stock_symbol = "GME"
start_date = "2022-01-01"
end_date = "2022-12-31"

# Fetch the stock data using yfinance
gamestop_stock_data = yf.download(stock_symbol, start=start_date, end=end_date)

# Plot the GameStop stock data
make_graph(gamestop_stock_data, "GameStop Stock Data")

# Save the plot as an image (optional)
plt.savefig('gamestop_stock_graph.png')


# In[ ]:




